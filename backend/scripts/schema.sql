-- Database Schema Generated on 2025-06-29T11:28:15.336Z
-- This file is auto-generated by update-schema.js
-- DO NOT EDIT MANUALLY - Run 'node scripts/update-schema.js' to update

-- Table: badges
CREATE TABLE IF NOT EXISTS "badges" (
  "id" UUID NOT NULL DEFAULT uuid_generate_v4(),
  "user_id" UUID NOT NULL,
  "game_id" UUID NOT NULL,
  "badge_id" CHARACTER VARYING(50) NOT NULL,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT "badges_pkey" PRIMARY KEY ("id"),
  CONSTRAINT "unique_user_game_badge" UNIQUE ("user_id"),
  CONSTRAINT "fk_badges_user_id" FOREIGN KEY ("user_id") REFERENCES "users"("user_id"),
  CONSTRAINT "fk_badges_game_id" FOREIGN KEY ("game_id") REFERENCES "games"("game_id")
);

-- Table: devices
CREATE TABLE IF NOT EXISTS "devices" (
  "device_id" UUID NOT NULL DEFAULT uuid_generate_v4(),
  "user_id" UUID,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "last_seen" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "metadata" JSONB,
  CONSTRAINT "devices_pkey" PRIMARY KEY ("device_id"),
  CONSTRAINT "fk_devices_user_id" FOREIGN KEY ("user_id") REFERENCES "users"("user_id")
);

-- Table: game_user_state
CREATE TABLE IF NOT EXISTS "game_user_state" (
  "id" UUID NOT NULL DEFAULT uuid_generate_v4(),
  "game_id" UUID NOT NULL,
  "user_id" UUID NOT NULL,
  "state" JSONB DEFAULT '{}'::jsonb,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT "game_user_state_pkey" PRIMARY KEY ("id"),
  CONSTRAINT "unique_game_user_state" UNIQUE ("game_id"),
  CONSTRAINT "fk_game_user_state_game_id" FOREIGN KEY ("game_id") REFERENCES "games"("game_id"),
  CONSTRAINT "fk_game_user_state_user_id" FOREIGN KEY ("user_id") REFERENCES "users"("user_id")
);

-- Table: games
CREATE TABLE IF NOT EXISTS "games" (
  "game_id" UUID NOT NULL DEFAULT uuid_generate_v4(),
  "name" TEXT NOT NULL,
  "creator_user_id" UUID,
  "status" CHARACTER VARYING(50) DEFAULT 'waiting'::character varying,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT "games_pkey" PRIMARY KEY ("game_id")
);

-- Table: questions
CREATE TABLE IF NOT EXISTS "questions" (
  "question_id" UUID NOT NULL DEFAULT uuid_generate_v4(),
  "question_text" TEXT NOT NULL,
  "question_type" CHARACTER VARYING(20) NOT NULL,
  "answers" JSONB,
  "allow_other" BOOLEAN DEFAULT false,
  "sensitivity" CHARACTER VARYING(10) NOT NULL,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "max_answers_to_show" INTEGER DEFAULT 4,
  CONSTRAINT "questions_pkey" PRIMARY KEY ("question_id")
);

-- Table: user_activities
CREATE TABLE IF NOT EXISTS "user_activities" (
  "id" UUID NOT NULL DEFAULT uuid_generate_v4(),
  "game_id" UUID NOT NULL,
  "user_id" UUID NOT NULL,
  "activity_type" TEXT NOT NULL,
  "activity_name" TEXT NOT NULL,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT "user_activities_pkey" PRIMARY KEY ("id"),
  CONSTRAINT "fk_user_activities_game_id" FOREIGN KEY ("game_id") REFERENCES "games"("game_id"),
  CONSTRAINT "fk_user_activities_user_id" FOREIGN KEY ("user_id") REFERENCES "users"("user_id")
);

-- Table: user_answers
CREATE TABLE IF NOT EXISTS "user_answers" (
  "id" INTEGER NOT NULL DEFAULT nextval('user_answers_id_seq'::regclass),
  "gameid" UUID NOT NULL,
  "questionid" UUID NOT NULL,
  "answer" TEXT NOT NULL,
  "is_correct" BOOLEAN DEFAULT false,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "answering_user_id" UUID NOT NULL,
  "about_user_id" UUID NOT NULL,
  "is_about_me" BOOLEAN GENERATED ALWAYS AS ((answering_user_id = about_user_id)) STORED,
  CONSTRAINT "user_answers_pkey" PRIMARY KEY ("id"),
  CONSTRAINT "fk_user_answers_answering_user_id" FOREIGN KEY ("answering_user_id") REFERENCES "users"("user_id"),
  CONSTRAINT "fk_user_answers_about_user_id" FOREIGN KEY ("about_user_id") REFERENCES "users"("user_id")
);

-- Table: user_generated_images
CREATE TABLE IF NOT EXISTS "user_generated_images" (
  "id" INTEGER NOT NULL DEFAULT nextval('user_generated_images_id_seq'::regclass),
  "user_id" UUID,
  "image_hash" CHARACTER VARYING(255) NOT NULL,
  "prompt_used" TEXT,
  "prompt_index" INTEGER,
  "generation_status" CHARACTER VARYING(50) DEFAULT 'generating'::character varying,
  "is_selected" BOOLEAN DEFAULT false,
  "file_path" CHARACTER VARYING(500),
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "completed_at" TIMESTAMP WITHOUT TIME ZONE,
  CONSTRAINT "user_generated_images_pkey" PRIMARY KEY ("id"),
  CONSTRAINT "user_generated_images_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("user_id")
);

-- Table: user_points
CREATE TABLE IF NOT EXISTS "user_points" (
  "id" UUID NOT NULL DEFAULT uuid_generate_v4(),
  "user_id" UUID NOT NULL,
  "game_id" UUID NOT NULL,
  "points" INTEGER DEFAULT 0,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT "user_points_pkey" PRIMARY KEY ("id"),
  CONSTRAINT "fk_user_points_user_id" FOREIGN KEY ("user_id") REFERENCES "users"("user_id"),
  CONSTRAINT "fk_user_points_game_id" FOREIGN KEY ("game_id") REFERENCES "games"("game_id")
);

-- Table: users
CREATE TABLE IF NOT EXISTS "users" (
  "user_id" UUID NOT NULL DEFAULT uuid_generate_v4(),
  "phone_number" CHARACTER VARYING(20),
  "phone_verified" BOOLEAN DEFAULT false,
  "created_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  "email" CHARACTER VARYING(255),
  "email_verified" BOOLEAN DEFAULT false,
  "name" CHARACTER VARYING(255),
  "gender" CHARACTER VARYING(10),
  "pending_image" CHARACTER VARYING(64),
  "has_image" BOOLEAN DEFAULT false,
  "image" CHARACTER VARYING(64),
  "is_temp_user" BOOLEAN DEFAULT false,
  CONSTRAINT "users_pkey" PRIMARY KEY ("user_id")
);

-- Indexes
CREATE INDEX idx_badges_badge_id ON public.badges USING btree (badge_id);
CREATE INDEX idx_badges_game_id ON public.badges USING btree (game_id);
CREATE INDEX idx_badges_user_id ON public.badges USING btree (user_id);
CREATE UNIQUE INDEX unique_user_game_badge ON public.badges USING btree (user_id, game_id, badge_id);
CREATE INDEX idx_devices_user_id ON public.devices USING btree (user_id);
CREATE INDEX idx_game_user_state_game_id ON public.game_user_state USING btree (game_id);
CREATE INDEX idx_game_user_state_game_user ON public.game_user_state USING btree (game_id, user_id);
CREATE INDEX idx_game_user_state_user_id ON public.game_user_state USING btree (user_id);
CREATE UNIQUE INDEX unique_game_user_state ON public.game_user_state USING btree (game_id, user_id);
CREATE INDEX idx_games_creator ON public.games USING btree (creator_user_id);
CREATE INDEX idx_games_status ON public.games USING btree (status);
CREATE INDEX idx_questions_created_at ON public.questions USING btree (created_at);
CREATE INDEX idx_questions_sensitivity ON public.questions USING btree (sensitivity);
CREATE INDEX idx_questions_type ON public.questions USING btree (question_type);
CREATE INDEX idx_user_activities_activity_name ON public.user_activities USING btree (activity_name);
CREATE INDEX idx_user_activities_activity_type ON public.user_activities USING btree (activity_type);
CREATE INDEX idx_user_activities_game_user ON public.user_activities USING btree (game_id, user_id);
CREATE INDEX idx_user_activities_game_user_type_name ON public.user_activities USING btree (game_id, user_id, activity_type, activity_name);
CREATE INDEX idx_user_answers_about_user_id ON public.user_answers USING btree (about_user_id);
CREATE INDEX idx_user_answers_answering_user_id ON public.user_answers USING btree (answering_user_id);
CREATE INDEX idx_user_answers_is_about_me ON public.user_answers USING btree (is_about_me);
CREATE INDEX idx_user_generated_images_status ON public.user_generated_images USING btree (generation_status);
CREATE INDEX idx_user_generated_images_user_id ON public.user_generated_images USING btree (user_id);
CREATE INDEX idx_user_points_game_id ON public.user_points USING btree (game_id);
CREATE INDEX idx_user_points_points ON public.user_points USING btree (points);
CREATE INDEX idx_user_points_user_game ON public.user_points USING btree (user_id, game_id);
CREATE INDEX idx_user_points_user_id ON public.user_points USING btree (user_id);
CREATE INDEX idx_users_email_lower ON public.users USING btree (lower((email)::text));
CREATE INDEX idx_users_gender ON public.users USING btree (gender);
CREATE INDEX idx_users_image ON public.users USING btree (image);
CREATE INDEX idx_users_pending_image ON public.users USING btree (pending_image);
CREATE INDEX idx_users_phone_number ON public.users USING btree (phone_number);
CREATE INDEX idx_users_phone_verified ON public.users USING btree (phone_verified);

-- Triggers
-- Trigger: update_game_user_state_updated_at on game_user_state
CREATE TRIGGER update_game_user_state_updated_at
  BEFORE UPDATE
  ON game_user_state
  EXECUTE FUNCTION update_updated_at_column();

-- Trigger: update_questions_updated_at on questions
CREATE TRIGGER update_questions_updated_at
  BEFORE UPDATE
  ON questions
  EXECUTE FUNCTION update_updated_at_column();

-- Trigger: update_user_points_updated_at on user_points
CREATE TRIGGER update_user_points_updated_at
  BEFORE UPDATE
  ON user_points
  EXECUTE FUNCTION update_updated_at_column();

-- Trigger: update_users_updated_at on users
CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE
  ON users
  EXECUTE FUNCTION update_updated_at_column();

-- Functions
-- Function: update_updated_at_column

BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;


-- Function: uuid_generate_v1
uuid_generate_v1

-- Function: uuid_generate_v1mc
uuid_generate_v1mc

-- Function: uuid_generate_v3
uuid_generate_v3

-- Function: uuid_generate_v4
uuid_generate_v4

-- Function: uuid_generate_v5
uuid_generate_v5

-- Function: uuid_nil
uuid_nil

-- Function: uuid_ns_dns
uuid_ns_dns

-- Function: uuid_ns_oid
uuid_ns_oid

-- Function: uuid_ns_url
uuid_ns_url

-- Function: uuid_ns_x500
uuid_ns_x500

